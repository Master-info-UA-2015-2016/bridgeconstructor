package expertsystem;

import java.util.ArrayList;

/**
 * Créer un fichier pour la classe Fact (les faits ?)
 */
//class Fact{
//	boolean value; // est-ce qu'on utilise un booléen ou un String : 
//				//	plusieurs types de sols, vrai/faux pour chaque type ou un seul fait avec le type ? 
//	String name;
//	
//	public Fact(String factName, boolean factVal){
//		name= factName;
//		value= factVal;
//	}
//}
/**
 * 
 * @author florian
 * 
 * TODO ajouter fonction qui recherche dans la base de faits quels ponts sont constructibles ou ajouter dans une liste de resultat les ponts possibles 
 */
public class FactsBase extends ArrayList<Word> {
//	List<Word> facts;
	// TODO ? créer une liste de noms et une liste de faits (sans noms ?), pour la recherche des faits
	
	/**
	 * Generated by Eclipse, commented by florian
	 */
	private static final long serialVersionUID = -4116996681511497762L;

	/**
	 * Constructeur base de faits
     * @return 
	 */
//	public FactsBase(){
////		facts= new ArrayList<Word>();
//		super();
//	}
	
	public String toString(){
		String chaine= "Base de faits : \n";
        chaine = this.stream().map((fact) -> "\t "+ fact.toString() +"\n").reduce(chaine, String::concat);
		
		return chaine;
	}
	
	/**
	 * Ajoute un fait -une affirmation/négation- dans la base de faits, à partir de son nom et de sa valeur
	 * @author florian
	 * 
	 * @param factName nom du nouveau fait
	 * @param factVal valeur (vrai ou faux) du nouveau fait
	 */
	public void addFact(String factName, boolean factVal){
		this.add(new Affirmation(factName, factVal));
	}
	
	/**
	 * Ajoute un fait -comparaison- dans la base de faits, à partir de son nom et de sa valeur
	 * @author florian
     * @param name
     * @param op
     * @param valCondition
	 */
	public void addFact(String name, Operator op, float valCondition){
		this.add(new Comparison(name, op, valCondition));
	}

	/**
	 * Ajoute un fait, déja existant, dans la base de faits
	 * @author florian
	 * 
	 * @param factName nom du nouveau fait
	 * @param factVal valeur (vrai ou faux) du nouveau fait
	 */
//	public void addFact(Word fact){
//		this.add(fact);
//	}
	
    /**
     * Cherche si un fait du nom donné est dans la base de faits
     * @author Florian
     * @param factName nom du fait que l'on recherche
     * @return le fait si on en trouve un, null sinon
     */
    public Word contains(String factName){
        System.out.print("\tBF contient: "+ factName +" ? ");
		for (Word w : this){
			// On vérifie que l
			if (w.getName().equals(factName) /* && w.getVal() == fact.getVal()*/ ){
				System.out.print("=> ");
				return w;
			}
		}
		System.out.println("=> NON");
		return null;
    }
    
	/**
	 * Vérifie si un fait est dans la base de faits
	 * @author florian
     * @param fact
	 * @return vrai si le fait est présent
	 */
	public Word contains(Word fact){
        return contains(fact.getName());
	}
	
	/**
	 * Teste si le fait F est demandable
	 * @param factName nom du fait que l'on teste
     * TODO à revoir, je pense qu'on ne vérifie pas la bonne chose
	 * @return boolean
	 */
	public boolean isFactDemandable(String factName) {
        if (!this.stream().noneMatch((fact) -> ( (fact.getName()).equals(factName)))) {
            return false;
        }
		return true;
	}
    
	/**
	 * Teste si le fait F est demandable
	 * @param fact fait à tester
	 * @return boolean
     * WARNING Pourrait etre récursion infinie si redéfinie dans une sous classe
	 */
	public boolean isFactDemandable(Word fact) {
		return isFactDemandable(fact);
	}
    
    
	/**
	 * Retourne une copie de la BF sans doublons de la BF
     * @return la copie de la BF "purgée"
	 */
	public FactsBase purged() {
        FactsBase cpy= this; // TODO Jerome: pq utiliser une copie plutot que de modifier la BF ?
		
		// On supprime les doublons identiques (name & val)
		boolean find;
		Affirmation A;
		Comparison C;
		int i = 0;
		while (i < cpy.size()) {
			find = false;
			Word W = cpy.get(i);
			System.out.println(W);
            
			// Dans le cas : Si c'est une Affirmation
			if(W.getClass() == Affirmation.class) {
				A = (Affirmation) W;
				// int j=i+1;
				for (int j = i + 1; j < cpy.size(); j++) {
					if(cpy.get(j).getClass() == Affirmation.class) {
						Affirmation ANext = (Affirmation) cpy.get(j);
						if (A.equals(ANext)) {
							cpy.remove(j);
							find = true;
							break;
						}
					}
				}
			}
            
			// Dans le cas : Si c'est une Comparaison
			if(W.getClass() == Comparison.class) {
				C = (Comparison) W;
				// int j=i+1;
				for (int j = i + 1; j < cpy.size(); j++) {
					if(cpy.get(j).getClass() == Comparison.class) {
						Comparison CNext = (Comparison) cpy.get(j);
						if (C.equals(CNext)) {
							cpy.remove(j);
							find = true;
							break;
						}
					}
				}
			}
			if (!find) {
                ++i;
            }
		}
		// On supprime les incohérences
		
		return cpy;
	}
	
//	public boolean contains(Comparison fact){
//		System.out.println("recherche si BF contient Comp : "+ fact);
//		for (Word w : this){
//			if (w.getName().equals(fact.getName()))
//				return true;
//		}
//		System.out.println("NON ne contient pas");
//		return false;
//		
////		return facts.contains(fact);
//	}
//	
//	public boolean contains(Affirmation fact){
//		System.out.println("recherche si BF contient Aff : "+ fact);
//		for (Word w : this){
//			if (w.getName().equals(fact.getName()))
//				return true;
//		}
//		return false;
//		
////		return facts.contains(fact);
	// }

    @Override
    public Object clone(){
        return super.clone(); //To change body of generated methods, choose Tools | Templates.
    }

}
