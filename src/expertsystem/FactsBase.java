package expertsystem;

import java.util.ArrayList;

/**
 * @author florian
 * Classe permettant la manipulation de la base de faits
 */
public class FactsBase extends ArrayList<Word> {
	
	/**
	 * Generated by Eclipse, commented by florian
	 */
	private static final long serialVersionUID = -4116996681511497762L;

	
	public String toString(){
		String chaine= "Base de faits : \n";
        chaine = this.stream().map((fact) -> "\t "+ fact.toString() +"\n").reduce(chaine, String::concat);
		
		return chaine;
	}
	
	/**
	 * Ajoute un fait -une affirmation/négation- dans la base de faits, à partir de son nom et de sa valeur
	 * @author florian
	 * 
	 * @param factName nom du nouveau fait
	 * @param factVal valeur (vrai ou faux) du nouveau fait
	 */
	public void addFact(String factName, boolean factVal){
        Affirmation aff= new Affirmation(factName, factVal);
        Word old= contains(aff);
        // GESTION DE LA COHERENCE : On conserve la valeur restrictive (NON mot) TODO adapter si un cas le requiert
        if (old == null){
            this.add(aff);
        } else {
            if ( !old.getVal().equals("false")){
                remove(old);
                add(aff);
            }
        }
	}
	
	/**
	 * Ajoute un fait -comparaison- dans la base de faits, à partir de son nom et de sa valeur
	 * @author florian
     * @param name
     * @param op
     * @param value
	 */
	public void addFact(String name, Operator op, float value){
        Comparison comp= new Comparison(name, op, value);
        Word old= contains(comp);
        // GESTION DE LA COHERENCE : On garde la plus grande valeur TODO adapter si un cas le requiert
        if (old == null){
            this.add(comp);
        } else {
            float val= Float.parseFloat(old.getVal());
            if ( val < value){
                remove(old);
                add(comp);
            }
        }
	}
    
    
	/**
	 * Ajoute un fait -comparaison- dans la base de faits, à partir de son nom et de sa valeur
	 * @author florian
     * @param name
     * @param value
	 */
	public void addFact(String name, float value){
        // Forcément des égalités dans la base de fait, donc Operator equal
		this.add(new Comparison(name, Operators.equal, value));
	}
	
    /**
     * Cherche si un fait du nom donné est dans la base de faits
     * @author Florian
     * @param factName nom du fait que l'on recherche
     * @return le fait si on en trouve un, null sinon
     */
    public Word contains(String factName){
        AIEngine.flux.print("\tBF contient: "+ factName +" ? ");
		for (Word w : this){
			// On vérifie que l
			if (w.getName().equals(factName) /* && w.getVal() == fact.getVal()*/ ){
				AIEngine.flux.print("=> ");
				return w;
			}
		}
		AIEngine.flux.println("=> NON");
		return null;
    }
    
	/**
	 * Vérifie si un fait est dans la base de faits
	 * @author florian
     * @param fact
	 * @return vrai si le fait est présent
	 */
	public Word contains(Word fact){
        return contains(fact.getName());
	}
	
	/**
	 * Teste si le fait F est demandable
	 * @param factName nom du fait que l'on teste
	 * @return boolean
	 */
	public boolean isFactDemandable(String factName) {
        return (this.stream().noneMatch((fact) -> ( (fact.getName()).equals(factName))));
	}
    
	/**
	 * Teste si le fait F est demandable
	 * @param fact fait à tester
	 * @return boolean
	 */
	public boolean isFactDemandable(Word fact) {
		return isFactDemandable(fact.getName());
	}
    
    
	/**
	 * Retourne une copie de la BF sans doublons de la BF
     * @return la copie de la BF "purgée"
	 */
	public void purge() {
		// On supprime les doublons identiques (name & val)
		boolean find;
		Affirmation A;
		Comparison C;
		int i = 0;
		while (i < this.size()) {
			find = false;
			Word W = this.get(i);
			AIEngine.flux.println(W);
            
			// Dans le cas : Si c'est une Affirmation
			if(W.getClass() == Affirmation.class) {
				A = (Affirmation) W;
				// int j=i+1;
				for (int j = i + 1; j < this.size(); j++) {
					if(this.get(j).getClass() == Affirmation.class) {
						Affirmation ANext = (Affirmation) this.get(j);
						if (A.equals(ANext)) {
							this.remove(j);
							find = true;
							break;
						}
					}
				}
			}
            
			// Dans le cas : Si c'est une Comparaison
			if(W.getClass() == Comparison.class) {
				C = (Comparison) W;
				// int j=i+1;
				for (int j = i + 1; j < this.size(); j++) {
					if(this.get(j).getClass() == Comparison.class) {
						Comparison CNext = (Comparison) this.get(j);
						if (C.equals(CNext)) {
							this.remove(j);
							find = true;
							break;
						}
					}
				}
			}
			if (!find) {
                ++i;
            }
		}
	}

    /**
     *
     * @return
     */
    @Override
    public Object clone(){
        return super.clone(); //To change body of generated methods, choose Tools | Templates.
    }

}
